'use client'

import React, { useState, useEffect, useCallback } from 'react'
import {
  Card,
  Table,
  Button,
  Modal,
  Form,
  Input,
  Select,
  Space,
  Typography,
  message,
  Popconfirm,
  Badge,
  Tag,
  DatePicker,
  Tooltip,
  Checkbox
} from 'antd'
import {
  RocketOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  PlayCircleOutlined,
  PauseCircleOutlined,
  ReloadOutlined,
  EyeOutlined,
  RollbackOutlined,
  InfoCircleOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  FileTextOutlined
} from '@ant-design/icons'
import type { ColumnsType } from 'antd/es/table'
import dayjs from 'dayjs'
import OptimizedDeploymentLogViewer from './OptimizedDeploymentLogViewer'

const { Title, Text } = Typography
const { Option } = Select
const { TextArea } = Input

interface Deployment {
  id: string
  projectId: string
  name: string
  description?: string
  environment: 'dev' | 'test' | 'prod'
  version?: string
  status: 'pending' | 'approved' | 'rejected' | 'scheduled' | 'deploying' | 'success' | 'failed' | 'rolled_back'
  buildNumber?: number
  scheduledAt?: string
  startedAt?: string
  completedAt?: string
  duration?: number
  logs?: string
  userId: string
  createdAt: string
  updatedAt: string
  project: {
    id: string
    name: string
    environment: string
  }
  approvals: Array<{
    id: string
    approverId: string
    status: 'pending' | 'approved' | 'rejected'
    comments?: string
    approvedAt?: string
    level: number
    approver: {
      id: string
      username: string
    }
  }>
}

interface Project {
  id: string
  name: string
  environment: string
  repositoryUrl?: string
  branch?: string
  buildScript?: string
  deployScript?: string
}



interface DeploymentManagerProps {
  projectId?: string
}

const DeploymentManager: React.FC<DeploymentManagerProps> = ({ projectId }) => {
  const [deployments, setDeployments] = useState<Deployment[]>([])
  const [projects, setProjects] = useState<Project[]>([])
  const [loading, setLoading] = useState(false)
  const [createModalVisible, setCreateModalVisible] = useState(false)
  const [editModalVisible, setEditModalVisible] = useState(false)
  const [editingDeployment, setEditingDeployment] = useState<Deployment | null>(null)
  const [users, setUsers] = useState<any[]>([])
  const [requireApproval, setRequireApproval] = useState(false)
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0
  })

  const [form] = Form.useForm()
  const [editForm] = Form.useForm()
  const [deployingIds, setDeployingIds] = useState<Set<string>>(new Set())
  const [detailModalVisible, setDetailModalVisible] = useState(false)
  const [selectedDeployment, setSelectedDeployment] = useState<Deployment | null>(null)
  const [logViewerVisible, setLogViewerVisible] = useState(false)
  const [selectedDeploymentForLogs, setSelectedDeploymentForLogs] = useState<Deployment | null>(null)

  // ‰ºòÂåñÁöÑÊï∞ÊçÆÂà∑Êñ∞ÂáΩÊï∞
  const refreshData = useCallback(() => {
    loadDeployments(pagination.current)
  }, [pagination.current])

  // Áä∂ÊÄÅËΩÆËØ¢ - Âè™Âú®ÊúâÈÉ®ÁΩ≤‰ªªÂä°ËøêË°åÊó∂ËΩÆËØ¢
  useEffect(() => {
    const hasDeployingTasks = deployments.some(d => d.status === 'deploying')

    if (!hasDeployingTasks) {
      return // Ê≤°ÊúâÊ≠£Âú®ÈÉ®ÁΩ≤ÁöÑ‰ªªÂä°Ôºå‰∏çÈúÄË¶ÅËΩÆËØ¢
    }

    console.log('üîÑ ÂºÄÂßãËΩÆËØ¢ÈÉ®ÁΩ≤Áä∂ÊÄÅÔºåÊ£ÄÊµãÂà∞Ê≠£Âú®ÈÉ®ÁΩ≤ÁöÑ‰ªªÂä°')
    const interval = setInterval(() => {
      refreshData()
    }, 3000) // ÊØè3ÁßíÊ£ÄÊü•‰∏ÄÊ¨°

    return () => {
      console.log('‚èπÔ∏è ÂÅúÊ≠¢ËΩÆËØ¢ÈÉ®ÁΩ≤Áä∂ÊÄÅ')
      clearInterval(interval)
    }
  }, [deployments, refreshData])

  // Âä†ËΩΩÈÉ®ÁΩ≤‰ªªÂä°ÂàóË°®
  const loadDeployments = async (page = 1) => {
    setLoading(true)
    try {
      const params = new URLSearchParams({
        page: page.toString(),
        limit: pagination.pageSize.toString()
      })

      if (projectId) {
        params.append('projectId', projectId)
      }

      const response = await fetch(`/api/cicd/deployments?${params}`)

      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setDeployments(result.data.deployments)
          setPagination(prev => ({
            ...prev,
            current: result.data.pagination.page,
            total: result.data.pagination.total
          }))
        } else {
          message.error(result.error || 'Âä†ËΩΩÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        message.error(errorData.error || 'Âä†ËΩΩÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
      }
    } catch (error) {
      console.error('Âä†ËΩΩÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•:', error)
      message.error('Âä†ËΩΩÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
    } finally {
      setLoading(false)
    }
  }

  // Âä†ËΩΩÈ°πÁõÆÂàóË°®
  const loadProjects = async () => {
    try {
      const response = await fetch('/api/cicd/projects?limit=100')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setProjects(result.data.projects)
        }
      }
    } catch (error) {
      console.error('Âä†ËΩΩÈ°πÁõÆÂàóË°®Â§±Ë¥•:', error)
    }
  }



  // Âä†ËΩΩÁî®Êà∑ÂàóË°®
  const loadUsers = async () => {
    try {
      const response = await fetch('/api/admin/users?limit=100')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setUsers(result.data.users || [])
        }
      }
    } catch (error) {
      console.error('Âä†ËΩΩÁî®Êà∑ÂàóË°®Â§±Ë¥•:', error)
    }
  }

  // ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°
  const handleCreateDeployment = async (values: any) => {
    try {
      const response = await fetch('/api/cicd/deployments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...values,
          scheduledAt: values.scheduledAt ? values.scheduledAt.toISOString() : undefined,
          requireApproval: values.requireApproval || false,
          approvers: values.approvers || []
        }),
      })

      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          message.success(result.message || 'ÈÉ®ÁΩ≤‰ªªÂä°ÂàõÂª∫ÊàêÂäü')
          setCreateModalVisible(false)
          form.resetFields()
          loadDeployments(pagination.current)
        } else {
          message.error(result.error || 'ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        message.error(errorData.error || 'ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
      }
    } catch (error) {
      console.error('ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•:', error)
      message.error('ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
    }
  }

  // ÁºñËæëÈÉ®ÁΩ≤‰ªªÂä°
  const handleEditDeployment = async (values: any) => {
    if (!editingDeployment) return

    try {
      const response = await fetch(`/api/cicd/deployments/${editingDeployment.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...values,
          scheduledAt: values.scheduledAt ? values.scheduledAt.toISOString() : null
        }),
      })

      if (response.ok) {
        const result = await response.json()
        message.success(result.message || 'ÈÉ®ÁΩ≤‰ªªÂä°Êõ¥Êñ∞ÊàêÂäü')
        setEditModalVisible(false)
        setEditingDeployment(null)
        editForm.resetFields()
        loadDeployments(pagination.current)
      } else {
        const errorData = await response.json().catch(() => ({}))
        message.error(errorData.error || 'Êõ¥Êñ∞ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
      }
    } catch (error) {
      console.error('Êõ¥Êñ∞ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•:', error)
      message.error('Êõ¥Êñ∞ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
    }
  }

  // Âà†Èô§ÈÉ®ÁΩ≤‰ªªÂä°
  const handleDeleteDeployment = async (deploymentId: string) => {
    try {
      const response = await fetch(`/api/cicd/deployments/${deploymentId}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        const result = await response.json()
        message.success(result.message || 'ÈÉ®ÁΩ≤‰ªªÂä°Âà†Èô§ÊàêÂäü')
        loadDeployments(pagination.current)
      } else {
        const errorData = await response.json().catch(() => ({}))
        message.error(errorData.error || 'Âà†Èô§ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
      }
    } catch (error) {
      console.error('Âà†Èô§ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•:', error)
      message.error('Âà†Èô§ÈÉ®ÁΩ≤‰ªªÂä°Â§±Ë¥•')
    }
  }

  // ÂºÄÂßãÈÉ®ÁΩ≤
  const handleStartDeployment = async (deployment: Deployment) => {
    if (deployment.status !== 'approved' && deployment.status !== 'scheduled') {
      message.warning('Âè™ÊúâÂ∑≤ÂÆ°ÊâπÊàñÂ∑≤ËÆ°ÂàíÁöÑÈÉ®ÁΩ≤‰ªªÂä°ÊâçËÉΩÂºÄÂßãÈÉ®ÁΩ≤')
      return
    }

    setDeployingIds(prev => new Set(prev).add(deployment.id))

    try {
      const response = await fetch(`/api/cicd/deployments/${deployment.id}/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const result = await response.json()

      if (result.success) {
        message.success('ÈÉ®ÁΩ≤Â∑≤ÂºÄÂßã')
        loadDeployments(pagination.current)
      } else {
        message.error(result.error || 'ÂêØÂä®ÈÉ®ÁΩ≤Â§±Ë¥•')
      }
    } catch (error) {
      console.error('ÂêØÂä®ÈÉ®ÁΩ≤Â§±Ë¥•:', error)
      message.error('ÂêØÂä®ÈÉ®ÁΩ≤Â§±Ë¥•')
    } finally {
      setDeployingIds(prev => {
        const newSet = new Set(prev)
        newSet.delete(deployment.id)
        return newSet
      })
    }
  }

  // ÂÅúÊ≠¢ÈÉ®ÁΩ≤
  const handleStopDeployment = async (deployment: Deployment) => {
    if (deployment.status !== 'deploying') {
      message.warning('Âè™ÊúâÊ≠£Âú®ÈÉ®ÁΩ≤ÁöÑ‰ªªÂä°ÊâçËÉΩÂÅúÊ≠¢')
      return
    }

    try {
      const response = await fetch(`/api/cicd/deployments/${deployment.id}/stop`, {
        method: 'POST'
      })

      const result = await response.json()

      if (result.success) {
        message.success('ÈÉ®ÁΩ≤Â∑≤ÂÅúÊ≠¢')
        loadDeployments(pagination.current)
      } else {
        message.error(result.error || 'ÂÅúÊ≠¢ÈÉ®ÁΩ≤Â§±Ë¥•')
      }
    } catch (error) {
      console.error('ÂÅúÊ≠¢ÈÉ®ÁΩ≤Â§±Ë¥•:', error)
      message.error('ÂÅúÊ≠¢ÈÉ®ÁΩ≤Â§±Ë¥•')
    }
  }

  // ÂõûÊªöÈÉ®ÁΩ≤
  const handleRollbackDeployment = async (deployment: Deployment) => {
    if (deployment.status !== 'success' && deployment.status !== 'failed') {
      message.warning('Âè™ÊúâÊàêÂäüÊàñÂ§±Ë¥•ÁöÑÈÉ®ÁΩ≤ÊâçËÉΩÂõûÊªö')
      return
    }

    try {
      const response = await fetch(`/api/cicd/deployments/${deployment.id}/rollback`, {
        method: 'POST'
      })

      const result = await response.json()

      if (result.success) {
        message.success('ÂõûÊªöÊìç‰ΩúÂ∑≤ÂºÄÂßã')
        loadDeployments(pagination.current)
      } else {
        message.error(result.error || 'ÂõûÊªöÊìç‰ΩúÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('ÂõûÊªöÊìç‰ΩúÂ§±Ë¥•:', error)
      message.error('ÂõûÊªöÊìç‰ΩúÂ§±Ë¥•')
    }
  }

  // Êü•ÁúãÈÉ®ÁΩ≤ËØ¶ÊÉÖ
  const handleViewDetail = (deployment: Deployment) => {
    setSelectedDeployment(deployment)
    setDetailModalVisible(true)
  }

  // Êü•ÁúãÂÆûÊó∂Êó•Âøó
  const handleViewLogs = (deployment: Deployment) => {
    setSelectedDeploymentForLogs(deployment)
    setLogViewerVisible(true)
  }

  // Áä∂ÊÄÅÊ†áÁ≠æÊ∏≤Êüì
  const renderStatusBadge = (status: string, deployment?: Deployment) => {
    const statusConfig = {
      pending: { color: 'orange', text: 'Á≠âÂæÖÂÆ°Êâπ' },
      approved: { color: 'green', text: 'Â∑≤ÂÆ°Êâπ' },
      rejected: { color: 'red', text: 'Â∑≤ÊãíÁªù' },
      scheduled: { color: 'blue', text: 'Â∑≤ËÆ°Âàí' },
      deploying: { color: 'processing', text: 'ÈÉ®ÁΩ≤‰∏≠' },
      success: { color: 'success', text: 'ÈÉ®ÁΩ≤ÊàêÂäü' },
      failed: { color: 'error', text: 'ÈÉ®ÁΩ≤Â§±Ë¥•' },
      rolled_back: { color: 'warning', text: 'Â∑≤ÂõûÊªö' }
    }

    let config = statusConfig[status as keyof typeof statusConfig] || { color: 'default', text: status }

    // Â¶ÇÊûúÊòØÈÉ®ÁΩ≤‰∏≠Áä∂ÊÄÅÔºåÂ∞ùËØï‰ªéÊó•Âøó‰∏≠ÊèêÂèñÂΩìÂâçÈò∂ÊÆµ
    if (status === 'deploying' && deployment?.logs) {
      const currentStage = extractCurrentStage(deployment.logs)
      if (currentStage) {
        config = { color: 'processing', text: currentStage }
      }
    }

    return <Badge status={config.color as any} text={config.text} />
  }

  // ‰ªéÈÉ®ÁΩ≤Êó•Âøó‰∏≠ÊèêÂèñÂΩìÂâçÊâßË°åÈò∂ÊÆµ
  const extractCurrentStage = (logs: string): string => {
    const lines = logs.split('\n').reverse() // ‰ªéÊúÄÊñ∞ÁöÑÊó•ÂøóÂºÄÂßãÊü•Êâæ

    const stagePatterns = [
      { pattern: /üöÄ ÂºÄÂßãÂÆåÊï¥ÈÉ®ÁΩ≤ÊµÅÁ®ã/, stage: 'ÂàùÂßãÂåñÈÉ®ÁΩ≤' },
      { pattern: /üìÅ ÂáÜÂ§áÂ∑•‰ΩúÁõÆÂΩï/, stage: 'ÂáÜÂ§áÂ∑•‰ΩúÁõÆÂΩï' },
      { pattern: /üì• ÂºÄÂßãÊãâÂèñ‰ª£Á†Å/, stage: 'ÊãâÂèñ‰ª£Á†Å‰∏≠' },
      { pattern: /üî® ÂºÄÂßãÊú¨Âú∞ÊûÑÂª∫/, stage: 'Êú¨Âú∞ÊûÑÂª∫‰∏≠' },
      { pattern: /üöÄ ÂºÄÂßãËøúÁ®ãÈÉ®ÁΩ≤/, stage: 'ËøúÁ®ãÈÉ®ÁΩ≤‰∏≠' },
      { pattern: /üì° Ëé∑Âèñ‰∏ªÊú∫ÈÖçÁΩÆ/, stage: 'ËøûÊé•ÁõÆÊ†á‰∏ªÊú∫' },
      { pattern: /üì§ ÂºÄÂßã‰º†ËæìÊûÑÂª∫‰∫ßÁâ©/, stage: '‰º†ËæìÊñá‰ª∂‰∏≠' },
      { pattern: /üîß ÂºÄÂßãÊâßË°åÈÉ®ÁΩ≤ËÑöÊú¨/, stage: 'ÊâßË°åÈÉ®ÁΩ≤ËÑöÊú¨' },
      { pattern: /üîç È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú/, stage: 'È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú' },
      { pattern: /üßπ Ê∏ÖÁêÜÂ∑•‰ΩúÁõÆÂΩï/, stage: 'Ê∏ÖÁêÜÂ∑•‰ΩúÁõÆÂΩï' },
      { pattern: /‚úÖ.*ÂÆåÊàê/, stage: 'Âç≥Â∞ÜÂÆåÊàê' }
    ]

    for (const line of lines) {
      for (const { pattern, stage } of stagePatterns) {
        if (pattern.test(line)) {
          return stage
        }
      }
    }

    return 'ÈÉ®ÁΩ≤‰∏≠'
  }

  // ÁéØÂ¢ÉÊ†áÁ≠æÊ∏≤Êüì
  const renderEnvironmentTag = (environment: string) => {
    const envConfig = {
      dev: { color: 'blue', text: 'ÂºÄÂèë' },
      test: { color: 'orange', text: 'ÊµãËØï' },
      prod: { color: 'red', text: 'Áîü‰∫ß' }
    }

    const config = envConfig[environment as keyof typeof envConfig] || { color: 'default', text: environment }
    return <Tag color={config.color}>{config.text}</Tag>
  }

  // Ë°®Ê†ºÂàóÂÆö‰πâ
  const columns: ColumnsType<Deployment> = [
    {
      title: 'ÈÉ®ÁΩ≤ÂêçÁß∞',
      dataIndex: 'name',
      key: 'name',
      render: (text, record) => (
        <div>
          <Text strong>{text}</Text>
          {record.description && (
            <div className="text-gray-500 text-sm">{record.description}</div>
          )}
        </div>
      )
    },
    {
      title: 'È°πÁõÆ',
      dataIndex: ['project', 'name'],
      key: 'project'
    },
    {
      title: 'ÁéØÂ¢É',
      dataIndex: 'environment',
      key: 'environment',
      render: renderEnvironmentTag
    },
    {
      title: 'Áä∂ÊÄÅ',
      dataIndex: 'status',
      key: 'status',
      render: (status: string, record: Deployment) => renderStatusBadge(status, record)
    },
    {
      title: 'ÁâàÊú¨',
      dataIndex: 'version',
      key: 'version',
      render: (text) => text || '-'
    },
    {
      title: 'ÂàõÂª∫Êó∂Èó¥',
      dataIndex: 'createdAt',
      key: 'createdAt',
      render: (text) => dayjs(text).format('YYYY-MM-DD HH:mm:ss')
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (_: any, record: Deployment) => {
        const canStart = record.status === 'approved' || record.status === 'scheduled'
        const canStop = record.status === 'deploying'
        const canRollback = record.status === 'success' || record.status === 'failed'
        const isDeploying = deployingIds.has(record.id)

        return (
          <Space wrap>
            <Tooltip title="Êü•ÁúãËØ¶ÊÉÖ">
              <Button
                type="text"
                icon={<EyeOutlined />}
                onClick={() => handleViewDetail(record)}
              />
            </Tooltip>

            <Tooltip title="Êü•ÁúãÂÆûÊó∂Êó•Âøó">
              <Button
                type="text"
                icon={<FileTextOutlined />}
                onClick={() => handleViewLogs(record)}
              />
            </Tooltip>

            {canStart && (
              <Tooltip title="ÂºÄÂßãÈÉ®ÁΩ≤">
                <Button
                  type="text"
                  icon={<PlayCircleOutlined />}
                  loading={isDeploying}
                  onClick={() => handleStartDeployment(record)}
                  style={{ color: '#52c41a' }}
                />
              </Tooltip>
            )}

            {canStop && (
              <Tooltip title="ÂÅúÊ≠¢ÈÉ®ÁΩ≤">
                <Button
                  type="text"
                  icon={<PauseCircleOutlined />}
                  onClick={() => handleStopDeployment(record)}
                  style={{ color: '#fa8c16' }}
                />
              </Tooltip>
            )}

            {canRollback && (
              <Popconfirm
                title="Á°ÆÂÆöË¶ÅÂõûÊªöËøô‰∏™ÈÉ®ÁΩ≤ÂêóÔºü"
                onConfirm={() => handleRollbackDeployment(record)}
                okText="Á°ÆÂÆö"
                cancelText="ÂèñÊ∂à"
              >
                <Tooltip title="ÂõûÊªö">
                  <Button
                    type="text"
                    icon={<RollbackOutlined />}
                    style={{ color: '#fa541c' }}
                  />
                </Tooltip>
              </Popconfirm>
            )}

            <Tooltip title="ÁºñËæë">
              <Button
                type="text"
                icon={<EditOutlined />}
                disabled={record.status === 'deploying'}
                onClick={() => {
                  setEditingDeployment(record)
                  editForm.setFieldsValue({
                    ...record,
                    scheduledAt: record.scheduledAt ? dayjs(record.scheduledAt) : undefined
                  })
                  setEditModalVisible(true)
                }}
              />
            </Tooltip>

            <Popconfirm
              title="Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÈÉ®ÁΩ≤‰ªªÂä°ÂêóÔºü"
              onConfirm={() => handleDeleteDeployment(record.id)}
              okText="Á°ÆÂÆö"
              cancelText="ÂèñÊ∂à"
            >
              <Tooltip title="Âà†Èô§">
                <Button
                  type="text"
                  danger
                  icon={<DeleteOutlined />}
                  disabled={record.status === 'deploying'}
                />
              </Tooltip>
            </Popconfirm>
          </Space>
        )
      }
    }
  ]

  // ÂàùÂßãÂåñÂä†ËΩΩ
  useEffect(() => {
    loadDeployments()
    loadProjects()
    loadUsers()

    // ËÆæÁΩÆÂÆöÊó∂Âà∑Êñ∞ÔºåÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°Áä∂ÊÄÅÊõ¥Êñ∞
    const interval = setInterval(() => {
      loadDeployments(pagination.current)
    }, 30000)

    return () => clearInterval(interval)
  }, [])

  // ÁõëÂê¨È°µÈù¢ÁÑ¶ÁÇπÂèòÂåñÔºåÂÆûÊó∂Êõ¥Êñ∞Êï∞ÊçÆ
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        // È°µÈù¢ÈáçÊñ∞Ëé∑ÂæóÁÑ¶ÁÇπÊó∂Âà∑Êñ∞Êï∞ÊçÆ
        loadDeployments(pagination.current)
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange)
  }, [pagination.current])

  return (
    <div>
      {/* Êìç‰ΩúÊ†è */}
      <Card className="glass-card mb-4">
        <div className="flex justify-between items-center">
          <div>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => setCreateModalVisible(true)}
            >
              ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°
            </Button>
          </div>
          <div>
            <Button
              icon={<ReloadOutlined />}
              onClick={() => loadDeployments(pagination.current)}
              loading={loading}
            >
              Âà∑Êñ∞
            </Button>
          </div>
        </div>
      </Card>

      {/* ÈÉ®ÁΩ≤‰ªªÂä°Ë°®Ê†º */}
      <Card className="glass-card">
        <Table
          columns={columns}
          dataSource={deployments}
          rowKey="id"
          loading={loading}
          pagination={{
            current: pagination.current,
            pageSize: pagination.pageSize,
            total: pagination.total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `Á¨¨ ${range[0]}-${range[1]} Êù°ÔºåÂÖ± ${total} Êù°`,
            onChange: (page, pageSize) => {
              setPagination(prev => ({ ...prev, pageSize: pageSize || 10 }))
              loadDeployments(page)
            },
          }}
        />
      </Card>

      {/* ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°Ê®°ÊÄÅÊ°Ü */}
      <Modal
        title="ÂàõÂª∫ÈÉ®ÁΩ≤‰ªªÂä°"
        open={createModalVisible}
        onCancel={() => setCreateModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleCreateDeployment}
        >
          <Form.Item
            name="projectId"
            label="È°πÁõÆ"
            rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©È°πÁõÆ' }]}
          >
            <Select
              placeholder="ÈÄâÊã©È°πÁõÆ"
              onChange={(value) => {
                // Ëá™Âä®Â°´ÂÖÖÈ°πÁõÆÁõ∏ÂÖ≥‰ø°ÊÅØ
                const selectedProject = projects.find(p => p.id === value)
                if (selectedProject) {
                  form.setFieldsValue({
                    environment: selectedProject.environment,
                    name: `${selectedProject.name} - ÈÉ®ÁΩ≤`,
                    description: `${selectedProject.name} È°πÁõÆÈÉ®ÁΩ≤‰ªªÂä°`
                  })
                }
              }}
            >
              {projects.map(project => (
                <Option key={project.id} value={project.id}>
                  {project.name}
                </Option>
              ))}
            </Select>
          </Form.Item>

          {/* È°πÁõÆ‰ø°ÊÅØÊòæÁ§∫ */}
          {form.getFieldValue('projectId') && (
            <Card size="small" className="mb-4" title="È°πÁõÆÈÖçÁΩÆ‰ø°ÊÅØ">
              {(() => {
                const selectedProject = projects.find(p => p.id === form.getFieldValue('projectId'))
                if (!selectedProject) return null

                return (
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <Text strong>‰ªìÂ∫ìÂú∞ÂùÄÔºö</Text>
                      <Text className="block text-gray-600">{selectedProject.repositoryUrl}</Text>
                    </div>
                    <div>
                      <Text strong>ÂàÜÊîØÔºö</Text>
                      <Text className="block text-gray-600">{selectedProject.branch}</Text>
                    </div>
                    <div>
                      <Text strong>ÊûÑÂª∫ËÑöÊú¨Ôºö</Text>
                      <Text className="block text-gray-600 font-mono text-xs">
                        {selectedProject.buildScript || 'Êú™ÈÖçÁΩÆ'}
                      </Text>
                    </div>
                    <div>
                      <Text strong>ÈÉ®ÁΩ≤ËÑöÊú¨Ôºö</Text>
                      <Text className="block text-gray-600 font-mono text-xs">
                        {selectedProject.deployScript || 'Êú™ÈÖçÁΩÆ'}
                      </Text>
                    </div>
                  </div>
                )
              })()}
            </Card>
          )}

          <Form.Item
            name="name"
            label="ÈÉ®ÁΩ≤ÂêçÁß∞"
            rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÈÉ®ÁΩ≤ÂêçÁß∞' }]}
          >
            <Input placeholder="ËæìÂÖ•ÈÉ®ÁΩ≤ÂêçÁß∞" />
          </Form.Item>

          <Form.Item
            name="description"
            label="ÊèèËø∞"
          >
            <TextArea rows={3} placeholder="ËæìÂÖ•ÈÉ®ÁΩ≤ÊèèËø∞" />
          </Form.Item>

          <Form.Item
            name="environment"
            label="ÁéØÂ¢É"
            rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÁéØÂ¢É' }]}
          >
            <Select placeholder="ÈÄâÊã©ÁéØÂ¢É">
              <Option value="dev">ÂºÄÂèëÁéØÂ¢É</Option>
              <Option value="test">ÊµãËØïÁéØÂ¢É</Option>
              <Option value="prod">Áîü‰∫ßÁéØÂ¢É</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="version"
            label="ÁâàÊú¨Âè∑"
          >
            <Input placeholder="ËæìÂÖ•ÁâàÊú¨Âè∑" />
          </Form.Item>



          <Form.Item
            name="scheduledAt"
            label="ËÆ°ÂàíÈÉ®ÁΩ≤Êó∂Èó¥"
          >
            <DatePicker
              showTime
              placeholder="ÈÄâÊã©ËÆ°ÂàíÈÉ®ÁΩ≤Êó∂Èó¥ÔºàÂèØÈÄâÔºâ"
              style={{ width: '100%' }}
            />
          </Form.Item>

          {/* ÂÆ°ÊâπÈÖçÁΩÆ */}
          <Form.Item
            name="requireApproval"
            valuePropName="checked"
          >
            <Checkbox onChange={(e) => setRequireApproval(e.target.checked)}>
              ÈúÄË¶ÅÂÆ°Êâπ
            </Checkbox>
          </Form.Item>

          {requireApproval && (
            <Form.Item
              name="approvers"
              label="ÂÆ°Êâπ‰∫∫"
              rules={[{ required: requireApproval, message: 'ËØ∑ÈÄâÊã©ÂÆ°Êâπ‰∫∫' }]}
            >
              <Select
                mode="multiple"
                placeholder="ÈÄâÊã©ÂÆ°Êâπ‰∫∫"
                style={{ width: '100%' }}
              >
                {users.map(user => (
                  <Option key={user.id} value={user.id}>
                    {user.username} ({user.email})
                  </Option>
                ))}
              </Select>
            </Form.Item>
          )}

          <Form.Item className="mb-0">
            <Space className="w-full justify-end">
              <Button onClick={() => setCreateModalVisible(false)}>
                ÂèñÊ∂à
              </Button>
              <Button type="primary" htmlType="submit">
                ÂàõÂª∫
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* ÁºñËæëÈÉ®ÁΩ≤‰ªªÂä°Ê®°ÊÄÅÊ°Ü */}
      <Modal
        title="ÁºñËæëÈÉ®ÁΩ≤‰ªªÂä°"
        open={editModalVisible}
        onCancel={() => {
          setEditModalVisible(false)
          setEditingDeployment(null)
          editForm.resetFields()
        }}
        footer={null}
        width={600}
      >
        <Form
          form={editForm}
          layout="vertical"
          onFinish={handleEditDeployment}
        >
          <Form.Item
            name="name"
            label="ÈÉ®ÁΩ≤ÂêçÁß∞"
            rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÈÉ®ÁΩ≤ÂêçÁß∞' }]}
          >
            <Input placeholder="ËæìÂÖ•ÈÉ®ÁΩ≤ÂêçÁß∞" />
          </Form.Item>

          <Form.Item
            name="description"
            label="ÊèèËø∞"
          >
            <TextArea
              placeholder="ËæìÂÖ•ÈÉ®ÁΩ≤ÊèèËø∞ÔºàÂèØÈÄâÔºâ"
              rows={3}
            />
          </Form.Item>

          <Form.Item
            name="environment"
            label="ÁéØÂ¢É"
            rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÈÉ®ÁΩ≤ÁéØÂ¢É' }]}
          >
            <Select placeholder="ÈÄâÊã©ÈÉ®ÁΩ≤ÁéØÂ¢É">
              <Option value="dev">ÂºÄÂèëÁéØÂ¢É</Option>
              <Option value="test">ÊµãËØïÁéØÂ¢É</Option>
              <Option value="prod">Áîü‰∫ßÁéØÂ¢É</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="version"
            label="ÁâàÊú¨Âè∑"
          >
            <Input placeholder="ËæìÂÖ•ÁâàÊú¨Âè∑ÔºàÂèØÈÄâÔºâ" />
          </Form.Item>



          <Form.Item
            name="scheduledAt"
            label="ËÆ°ÂàíÈÉ®ÁΩ≤Êó∂Èó¥"
          >
            <DatePicker
              showTime
              placeholder="ÈÄâÊã©ËÆ°ÂàíÈÉ®ÁΩ≤Êó∂Èó¥ÔºàÂèØÈÄâÔºâ"
              style={{ width: '100%' }}
            />
          </Form.Item>

          <Form.Item className="mb-0">
            <Space className="w-full justify-end">
              <Button onClick={() => {
                setEditModalVisible(false)
                setEditingDeployment(null)
                editForm.resetFields()
              }}>
                ÂèñÊ∂à
              </Button>
              <Button type="primary" htmlType="submit">
                ‰øùÂ≠ò‰øÆÊîπ
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* ÈÉ®ÁΩ≤ËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title={
          <Space>
            <InfoCircleOutlined />
            ÈÉ®ÁΩ≤ËØ¶ÊÉÖ
          </Space>
        }
        open={detailModalVisible}
        onCancel={() => {
          setDetailModalVisible(false)
          setSelectedDeployment(null)
        }}
        width={800}
        footer={[
          <Button key="close" onClick={() => setDetailModalVisible(false)}>
            ÂÖ≥Èó≠
          </Button>
        ]}
      >
        {selectedDeployment && (
          <div>
            <Card size="small" className="mb-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Text strong>ÈÉ®ÁΩ≤ÂêçÁß∞Ôºö</Text>
                  <Text>{selectedDeployment.name}</Text>
                </div>
                <div>
                  <Text strong>Áä∂ÊÄÅÔºö</Text>
                  {renderStatusBadge(selectedDeployment.status)}
                </div>
                <div>
                  <Text strong>ÁéØÂ¢ÉÔºö</Text>
                  {renderEnvironmentTag(selectedDeployment.environment)}
                </div>
                <div>
                  <Text strong>ÁâàÊú¨Ôºö</Text>
                  <Text>{selectedDeployment.version || '-'}</Text>
                </div>
                <div>
                  <Text strong>ÊâÄÂ±ûÈ°πÁõÆÔºö</Text>
                  <Text>{selectedDeployment.project.name}</Text>
                </div>
                <div>
                  <Text strong>ÊûÑÂª∫Âè∑Ôºö</Text>
                  <Text>{selectedDeployment.buildNumber || '-'}</Text>
                </div>
              </div>
            </Card>

            {selectedDeployment.description && (
              <Card size="small" title="ÊèèËø∞" className="mb-4">
                <Text>{selectedDeployment.description}</Text>
              </Card>
            )}

            {selectedDeployment.approvals && selectedDeployment.approvals.length > 0 && (
              <Card size="small" title="ÂÆ°Êâπ‰ø°ÊÅØ" className="mb-4">
                <div className="space-y-2">
                  {selectedDeployment.approvals.map((approval) => (
                    <div key={approval.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                      <div>
                        <Text strong>ÂÆ°Êâπ‰∫∫Ôºö</Text>
                        <Text>{approval.approver.username}</Text>
                        <Text className="ml-4 text-gray-500">Á∫ßÂà´ {approval.level}</Text>
                      </div>
                      <div>
                        {approval.status === 'approved' && (
                          <Tag color="green" icon={<CheckCircleOutlined />}>Â∑≤ÈÄöËøá</Tag>
                        )}
                        {approval.status === 'rejected' && (
                          <Tag color="red" icon={<CloseCircleOutlined />}>Â∑≤ÊãíÁªù</Tag>
                        )}
                        {approval.status === 'pending' && (
                          <Tag color="orange">ÂæÖÂÆ°Êâπ</Tag>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            )}

            {selectedDeployment.logs && (
              <Card size="small" title="ÈÉ®ÁΩ≤Êó•Âøó">
                <div
                  className="bg-black text-green-400 p-3 rounded font-mono text-sm max-h-64 overflow-y-auto"
                  style={{ whiteSpace: 'pre-wrap' }}
                >
                  {selectedDeployment.logs}
                </div>
              </Card>
            )}
          </div>
        )}
      </Modal>

      {/* ‰ºòÂåñÁöÑÂÆûÊó∂Êó•ÂøóÊü•ÁúãÂô® */}
      <OptimizedDeploymentLogViewer
        visible={logViewerVisible}
        onClose={() => setLogViewerVisible(false)}
        deploymentId={selectedDeploymentForLogs?.id || ''}
        deploymentName={selectedDeploymentForLogs?.name || ''}
      />
    </div>
  )
}

export default DeploymentManager
